RAPHT, a architectural pattern for writing applications
=======================================================

Overview
========

RAPHT was designed for the web. It is basically an extension to MVC that 
provides greater security and flexibility.

Parts
=====

R - Resource
A - Action
P - Processor
H - Handler
T - Template

Resources
=========

Resources are things that you can interact with. This could be a database or an 
external API for example.

Action
======

A action is a way to interact with a resource. Typically it is given 
information that relates to authentication as well as information about the 
request. Resources are not accessed without actions.

Processor
=========

A transformation of data.

Handler
=======

The entry point for a request. In a web application, a url regex is typically 
mapped to a handler.

Template
========

Renders data.

Afterword
=========

There is a clear divide between the RA parts and the HPT parts. Whereas the HPT 
parts can be executed on the untrusted client-side, the RA parts must be 
executed under a trusted environment.

Notes
=====
A potential technique for properly handling memleaks when response_add_header
or response_write fails.
1. Write free_headers() and free_segments()
2. If failure occurs while adding a header, free all the previous added headers
   and return false. This indicates that we should stop trying to serve the page.
3. If failure occurs while adding a segment, free all headers and previous
   segments and return false. This indicates that we should stop trying to serve
   the page.